Description: Sets up auto-scaling group, security group and load balancer resources
Parameters:
    EnvironmentName:
        Description: An enviroment name that will be appended to each resources
        Type: String
    AmazonMachineImage:
        Description: Contains the software configuration (operating system, application server, and applications) required to launch an instance.
        Type: String
    MachineInstanceType:
        Description: Select an instance type that meets the application'scomputing, memory, networking, or storage needs.
        Type: String
Resources:    
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: "0.0.0.0/0"
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: "0.0.0.0/0"
            Tags:
                - Key: Name
                  Value: !Sub "${EnvironmentName}-WebserverSecGroup"
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http traffic to and from Load Balancer on port 80
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: "0.0.0.0/0"
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: "0.0.0.0/0"
            Tags:
                - Key: Name
                  Value: !Sub "${EnvironmentName}-LBSecGroup"
    WebAppLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install apache2 -y
                    systemctl start apache.service
                    cd /var/www/html
                    echo "<h1>It works! Udagram App Up and Running!<h1>" > index.html
            ImageId: !Ref AmazonMachineImage
            SecurityGroups:
                - Ref: WebServerSecGroup
            InstanceType: !Ref MachineInstanceType
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                      VolumeSize: 10
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PRV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfiguration
            MinSize: "4"
            MaxSize: "4"
            HealthCheckGracePeriod: 60
            HealthCheckType: ELB
            TargetGroupARNs:
                - Ref: WebAppTargetGroup
    WebAppTargetGroup:                
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
                - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
            SecurityGroups:
                - Ref: LBSecGroup
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                      Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: 80
            Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1
Outputs:
    LoadBalancerUrl:
        Description: Load balancer DNS hostname
        Value: !Sub http://${WebAppLB.DNSName}
        Export:
            Name: !Sub ${EnvironmentName}-LB-URL